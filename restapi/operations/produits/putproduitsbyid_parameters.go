// Code generated by go-swagger; DO NOT EDIT.

package produits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPutproduitsbyidParams creates a new PutproduitsbyidParams object
//
// There are no default values defined in the spec.
func NewPutproduitsbyidParams() PutproduitsbyidParams {

	return PutproduitsbyidParams{}
}

// PutproduitsbyidParams contains all the bound params for the putproduitsbyid operation
// typically these are obtained from a http.Request
//
// swagger:parameters putproduitsbyid
type PutproduitsbyidParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*ID of user in database
	  Required: true
	  In: path
	*/
	ID int64
	/*
	  In: query
	*/
	LinkPhoto *string
	/*
	  In: query
	*/
	LinkPhotoEmplacement *string
	/*
	  In: query
	*/
	Nom *string
	/*
	  In: query
	*/
	Prix *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPutproduitsbyidParams() beforehand.
func (o *PutproduitsbyidParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qLinkPhoto, qhkLinkPhoto, _ := qs.GetOK("link_photo")
	if err := o.bindLinkPhoto(qLinkPhoto, qhkLinkPhoto, route.Formats); err != nil {
		res = append(res, err)
	}

	qLinkPhotoEmplacement, qhkLinkPhotoEmplacement, _ := qs.GetOK("link_photo_emplacement")
	if err := o.bindLinkPhotoEmplacement(qLinkPhotoEmplacement, qhkLinkPhotoEmplacement, route.Formats); err != nil {
		res = append(res, err)
	}

	qNom, qhkNom, _ := qs.GetOK("nom")
	if err := o.bindNom(qNom, qhkNom, route.Formats); err != nil {
		res = append(res, err)
	}

	qPrix, qhkPrix, _ := qs.GetOK("prix")
	if err := o.bindPrix(qPrix, qhkPrix, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindID binds and validates parameter ID from path.
func (o *PutproduitsbyidParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("id", "path", "int64", raw)
	}
	o.ID = value

	return nil
}

// bindLinkPhoto binds and validates parameter LinkPhoto from query.
func (o *PutproduitsbyidParams) bindLinkPhoto(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.LinkPhoto = &raw

	return nil
}

// bindLinkPhotoEmplacement binds and validates parameter LinkPhotoEmplacement from query.
func (o *PutproduitsbyidParams) bindLinkPhotoEmplacement(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.LinkPhotoEmplacement = &raw

	return nil
}

// bindNom binds and validates parameter Nom from query.
func (o *PutproduitsbyidParams) bindNom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Nom = &raw

	return nil
}

// bindPrix binds and validates parameter Prix from query.
func (o *PutproduitsbyidParams) bindPrix(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Prix = &raw

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package produits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutproduitsbyidHandlerFunc turns a function with the right signature into a putproduitsbyid handler
type PutproduitsbyidHandlerFunc func(PutproduitsbyidParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutproduitsbyidHandlerFunc) Handle(params PutproduitsbyidParams) middleware.Responder {
	return fn(params)
}

// PutproduitsbyidHandler interface for that can handle valid putproduitsbyid params
type PutproduitsbyidHandler interface {
	Handle(PutproduitsbyidParams) middleware.Responder
}

// NewPutproduitsbyid creates a new http.Handler for the putproduitsbyid operation
func NewPutproduitsbyid(ctx *middleware.Context, handler PutproduitsbyidHandler) *Putproduitsbyid {
	return &Putproduitsbyid{Context: ctx, Handler: handler}
}

/*
	Putproduitsbyid swagger:route PUT /produits/{id} produits putproduitsbyid

Putproduitsbyid putproduitsbyid API
*/
type Putproduitsbyid struct {
	Context *middleware.Context
	Handler PutproduitsbyidHandler
}

func (o *Putproduitsbyid) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutproduitsbyidParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

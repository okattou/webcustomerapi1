// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"
)

// PostcustomerURL generates an URL for the postcustomer operation
type PostcustomerURL struct {
	Name    *string
	Prenom  *string
	Adresse *string
	Email   *string
	Pays    *string
	Phone   *string
	Phone2  *string
	Ville   *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *PostcustomerURL) WithBasePath(bp string) *PostcustomerURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *PostcustomerURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *PostcustomerURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/customer"

	_basePath := o._basePath
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var nameQ string
	if o.Name != nil {
		nameQ = *o.Name
	}
	if nameQ != "" {
		qs.Set("Name", nameQ)
	}

	var prenomQ string
	if o.Prenom != nil {
		prenomQ = *o.Prenom
	}
	if prenomQ != "" {
		qs.Set("Prenom", prenomQ)
	}

	var adresseQ string
	if o.Adresse != nil {
		adresseQ = *o.Adresse
	}
	if adresseQ != "" {
		qs.Set("adresse", adresseQ)
	}

	var emailQ string
	if o.Email != nil {
		emailQ = *o.Email
	}
	if emailQ != "" {
		qs.Set("email", emailQ)
	}

	var paysQ string
	if o.Pays != nil {
		paysQ = *o.Pays
	}
	if paysQ != "" {
		qs.Set("pays", paysQ)
	}

	var phoneQ string
	if o.Phone != nil {
		phoneQ = *o.Phone
	}
	if phoneQ != "" {
		qs.Set("phone", phoneQ)
	}

	var phone2Q string
	if o.Phone2 != nil {
		phone2Q = *o.Phone2
	}
	if phone2Q != "" {
		qs.Set("phone2", phone2Q)
	}

	var villeQ string
	if o.Ville != nil {
		villeQ = *o.Ville
	}
	if villeQ != "" {
		qs.Set("ville", villeQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *PostcustomerURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *PostcustomerURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *PostcustomerURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on PostcustomerURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on PostcustomerURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *PostcustomerURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}

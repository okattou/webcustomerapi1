// Code generated by go-swagger; DO NOT EDIT.

package contact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetcontactHandlerFunc turns a function with the right signature into a getcontact handler
type GetcontactHandlerFunc func(GetcontactParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetcontactHandlerFunc) Handle(params GetcontactParams) middleware.Responder {
	return fn(params)
}

// GetcontactHandler interface for that can handle valid getcontact params
type GetcontactHandler interface {
	Handle(GetcontactParams) middleware.Responder
}

// NewGetcontact creates a new http.Handler for the getcontact operation
func NewGetcontact(ctx *middleware.Context, handler GetcontactHandler) *Getcontact {
	return &Getcontact{Context: ctx, Handler: handler}
}

/*
	Getcontact swagger:route GET /contact contact getcontact

Getcontact getcontact API
*/
type Getcontact struct {
	Context *middleware.Context
	Handler GetcontactHandler
}

func (o *Getcontact) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetcontactParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

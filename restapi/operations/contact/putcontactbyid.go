// Code generated by go-swagger; DO NOT EDIT.

package contact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutcontactbyidHandlerFunc turns a function with the right signature into a putcontactbyid handler
type PutcontactbyidHandlerFunc func(PutcontactbyidParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutcontactbyidHandlerFunc) Handle(params PutcontactbyidParams) middleware.Responder {
	return fn(params)
}

// PutcontactbyidHandler interface for that can handle valid putcontactbyid params
type PutcontactbyidHandler interface {
	Handle(PutcontactbyidParams) middleware.Responder
}

// NewPutcontactbyid creates a new http.Handler for the putcontactbyid operation
func NewPutcontactbyid(ctx *middleware.Context, handler PutcontactbyidHandler) *Putcontactbyid {
	return &Putcontactbyid{Context: ctx, Handler: handler}
}

/*
	Putcontactbyid swagger:route PUT /contact/{id} contact putcontactbyid

Putcontactbyid putcontactbyid API
*/
type Putcontactbyid struct {
	Context *middleware.Context
	Handler PutcontactbyidHandler
}

func (o *Putcontactbyid) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutcontactbyidParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
